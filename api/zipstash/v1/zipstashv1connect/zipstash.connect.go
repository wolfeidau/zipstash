// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zipstash/v1/zipstash.proto

package zipstashv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wolfeidau/zipstash/api/zipstash/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ZipStashServiceName is the fully-qualified name of the ZipStashService service.
	ZipStashServiceName = "zipstash.v1.ZipStashService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ZipStashServiceCreateCacheEntryProcedure is the fully-qualified name of the ZipStashService's
	// CreateCacheEntry RPC.
	ZipStashServiceCreateCacheEntryProcedure = "/zipstash.v1.ZipStashService/CreateCacheEntry"
	// ZipStashServiceUpdateCacheEntryProcedure is the fully-qualified name of the ZipStashService's
	// UpdateCacheEntry RPC.
	ZipStashServiceUpdateCacheEntryProcedure = "/zipstash.v1.ZipStashService/UpdateCacheEntry"
	// ZipStashServiceGetCacheEntryProcedure is the fully-qualified name of the ZipStashService's
	// GetCacheEntry RPC.
	ZipStashServiceGetCacheEntryProcedure = "/zipstash.v1.ZipStashService/GetCacheEntry"
)

// ZipStashServiceClient is a client for the zipstash.v1.ZipStashService service.
type ZipStashServiceClient interface {
	// CreateCacheEntry creates a new cache entry
	CreateCacheEntry(context.Context, *connect.Request[v1.CreateCacheEntryRequest]) (*connect.Response[v1.CreateCacheEntryResponse], error)
	// UpdateCacheEntry updates an existing cache entry
	UpdateCacheEntry(context.Context, *connect.Request[v1.UpdateCacheEntryRequest]) (*connect.Response[v1.UpdateCacheEntryResponse], error)
	// GetCacheEntry retrieves a cache entry by key
	GetCacheEntry(context.Context, *connect.Request[v1.GetCacheEntryRequest]) (*connect.Response[v1.GetCacheEntryResponse], error)
}

// NewZipStashServiceClient constructs a client for the zipstash.v1.ZipStashService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewZipStashServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ZipStashServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	zipStashServiceMethods := v1.File_zipstash_v1_zipstash_proto.Services().ByName("ZipStashService").Methods()
	return &zipStashServiceClient{
		createCacheEntry: connect.NewClient[v1.CreateCacheEntryRequest, v1.CreateCacheEntryResponse](
			httpClient,
			baseURL+ZipStashServiceCreateCacheEntryProcedure,
			connect.WithSchema(zipStashServiceMethods.ByName("CreateCacheEntry")),
			connect.WithClientOptions(opts...),
		),
		updateCacheEntry: connect.NewClient[v1.UpdateCacheEntryRequest, v1.UpdateCacheEntryResponse](
			httpClient,
			baseURL+ZipStashServiceUpdateCacheEntryProcedure,
			connect.WithSchema(zipStashServiceMethods.ByName("UpdateCacheEntry")),
			connect.WithClientOptions(opts...),
		),
		getCacheEntry: connect.NewClient[v1.GetCacheEntryRequest, v1.GetCacheEntryResponse](
			httpClient,
			baseURL+ZipStashServiceGetCacheEntryProcedure,
			connect.WithSchema(zipStashServiceMethods.ByName("GetCacheEntry")),
			connect.WithClientOptions(opts...),
		),
	}
}

// zipStashServiceClient implements ZipStashServiceClient.
type zipStashServiceClient struct {
	createCacheEntry *connect.Client[v1.CreateCacheEntryRequest, v1.CreateCacheEntryResponse]
	updateCacheEntry *connect.Client[v1.UpdateCacheEntryRequest, v1.UpdateCacheEntryResponse]
	getCacheEntry    *connect.Client[v1.GetCacheEntryRequest, v1.GetCacheEntryResponse]
}

// CreateCacheEntry calls zipstash.v1.ZipStashService.CreateCacheEntry.
func (c *zipStashServiceClient) CreateCacheEntry(ctx context.Context, req *connect.Request[v1.CreateCacheEntryRequest]) (*connect.Response[v1.CreateCacheEntryResponse], error) {
	return c.createCacheEntry.CallUnary(ctx, req)
}

// UpdateCacheEntry calls zipstash.v1.ZipStashService.UpdateCacheEntry.
func (c *zipStashServiceClient) UpdateCacheEntry(ctx context.Context, req *connect.Request[v1.UpdateCacheEntryRequest]) (*connect.Response[v1.UpdateCacheEntryResponse], error) {
	return c.updateCacheEntry.CallUnary(ctx, req)
}

// GetCacheEntry calls zipstash.v1.ZipStashService.GetCacheEntry.
func (c *zipStashServiceClient) GetCacheEntry(ctx context.Context, req *connect.Request[v1.GetCacheEntryRequest]) (*connect.Response[v1.GetCacheEntryResponse], error) {
	return c.getCacheEntry.CallUnary(ctx, req)
}

// ZipStashServiceHandler is an implementation of the zipstash.v1.ZipStashService service.
type ZipStashServiceHandler interface {
	// CreateCacheEntry creates a new cache entry
	CreateCacheEntry(context.Context, *connect.Request[v1.CreateCacheEntryRequest]) (*connect.Response[v1.CreateCacheEntryResponse], error)
	// UpdateCacheEntry updates an existing cache entry
	UpdateCacheEntry(context.Context, *connect.Request[v1.UpdateCacheEntryRequest]) (*connect.Response[v1.UpdateCacheEntryResponse], error)
	// GetCacheEntry retrieves a cache entry by key
	GetCacheEntry(context.Context, *connect.Request[v1.GetCacheEntryRequest]) (*connect.Response[v1.GetCacheEntryResponse], error)
}

// NewZipStashServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewZipStashServiceHandler(svc ZipStashServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	zipStashServiceMethods := v1.File_zipstash_v1_zipstash_proto.Services().ByName("ZipStashService").Methods()
	zipStashServiceCreateCacheEntryHandler := connect.NewUnaryHandler(
		ZipStashServiceCreateCacheEntryProcedure,
		svc.CreateCacheEntry,
		connect.WithSchema(zipStashServiceMethods.ByName("CreateCacheEntry")),
		connect.WithHandlerOptions(opts...),
	)
	zipStashServiceUpdateCacheEntryHandler := connect.NewUnaryHandler(
		ZipStashServiceUpdateCacheEntryProcedure,
		svc.UpdateCacheEntry,
		connect.WithSchema(zipStashServiceMethods.ByName("UpdateCacheEntry")),
		connect.WithHandlerOptions(opts...),
	)
	zipStashServiceGetCacheEntryHandler := connect.NewUnaryHandler(
		ZipStashServiceGetCacheEntryProcedure,
		svc.GetCacheEntry,
		connect.WithSchema(zipStashServiceMethods.ByName("GetCacheEntry")),
		connect.WithHandlerOptions(opts...),
	)
	return "/zipstash.v1.ZipStashService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ZipStashServiceCreateCacheEntryProcedure:
			zipStashServiceCreateCacheEntryHandler.ServeHTTP(w, r)
		case ZipStashServiceUpdateCacheEntryProcedure:
			zipStashServiceUpdateCacheEntryHandler.ServeHTTP(w, r)
		case ZipStashServiceGetCacheEntryProcedure:
			zipStashServiceGetCacheEntryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedZipStashServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedZipStashServiceHandler struct{}

func (UnimplementedZipStashServiceHandler) CreateCacheEntry(context.Context, *connect.Request[v1.CreateCacheEntryRequest]) (*connect.Response[v1.CreateCacheEntryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zipstash.v1.ZipStashService.CreateCacheEntry is not implemented"))
}

func (UnimplementedZipStashServiceHandler) UpdateCacheEntry(context.Context, *connect.Request[v1.UpdateCacheEntryRequest]) (*connect.Response[v1.UpdateCacheEntryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zipstash.v1.ZipStashService.UpdateCacheEntry is not implemented"))
}

func (UnimplementedZipStashServiceHandler) GetCacheEntry(context.Context, *connect.Request[v1.GetCacheEntryRequest]) (*connect.Response[v1.GetCacheEntryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zipstash.v1.ZipStashService.GetCacheEntry is not implemented"))
}
