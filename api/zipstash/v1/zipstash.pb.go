// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: zipstash/v1/zipstash.proto

package zipstashv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Provider represents supported CI/CD providers
type Provider int32

const (
	Provider_PROVIDER_UNSPECIFIED    Provider = 0
	Provider_PROVIDER_GITHUB_ACTIONS Provider = 1
	Provider_PROVIDER_GITLAB         Provider = 2
	Provider_PROVIDER_BUILDKITE      Provider = 3
)

// Enum value maps for Provider.
var (
	Provider_name = map[int32]string{
		0: "PROVIDER_UNSPECIFIED",
		1: "PROVIDER_GITHUB_ACTIONS",
		2: "PROVIDER_GITLAB",
		3: "PROVIDER_BUILDKITE",
	}
	Provider_value = map[string]int32{
		"PROVIDER_UNSPECIFIED":    0,
		"PROVIDER_GITHUB_ACTIONS": 1,
		"PROVIDER_GITLAB":         2,
		"PROVIDER_BUILDKITE":      3,
	}
)

func (x Provider) Enum() *Provider {
	p := new(Provider)
	*p = x
	return p
}

func (x Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_zipstash_v1_zipstash_proto_enumTypes[0].Descriptor()
}

func (Provider) Type() protoreflect.EnumType {
	return &file_zipstash_v1_zipstash_proto_enumTypes[0]
}

func (x Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Provider.Descriptor instead.
func (Provider) EnumDescriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{0}
}

// Error represents an error response
type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *status.Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// CacheEntry represents a cache entry in the system
type CacheEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	FileSize      int64                  `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Branch        string                 `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	Compression   string                 `protobuf:"bytes,5,opt,name=compression,proto3" json:"compression,omitempty"`
	Sha256Sum     string                 `protobuf:"bytes,6,opt,name=sha256sum,proto3" json:"sha256sum,omitempty"`
	Url           string                 `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	Paths         []string               `protobuf:"bytes,8,rep,name=paths,proto3" json:"paths,omitempty"`
	EntryCreated  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=entry_created,json=entryCreated,proto3" json:"entry_created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheEntry) Reset() {
	*x = CacheEntry{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheEntry) ProtoMessage() {}

func (x *CacheEntry) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheEntry.ProtoReflect.Descriptor instead.
func (*CacheEntry) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{1}
}

func (x *CacheEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CacheEntry) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *CacheEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CacheEntry) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *CacheEntry) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *CacheEntry) GetSha256Sum() string {
	if x != nil {
		return x.Sha256Sum
	}
	return ""
}

func (x *CacheEntry) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CacheEntry) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *CacheEntry) GetEntryCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.EntryCreated
	}
	return nil
}

// Offset represents a part of a multipart upload/download
type Offset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Part          int32                  `protobuf:"varint,1,opt,name=part,proto3" json:"part,omitempty"`
	Start         int64                  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End           int64                  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Offset) Reset() {
	*x = Offset{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Offset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offset) ProtoMessage() {}

func (x *Offset) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offset.ProtoReflect.Descriptor instead.
func (*Offset) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{2}
}

func (x *Offset) GetPart() int32 {
	if x != nil {
		return x.Part
	}
	return 0
}

func (x *Offset) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Offset) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

// CacheUploadInstruction contains instructions for uploading cache data
type CacheUploadInstruction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Offset        *Offset                `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheUploadInstruction) Reset() {
	*x = CacheUploadInstruction{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheUploadInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheUploadInstruction) ProtoMessage() {}

func (x *CacheUploadInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheUploadInstruction.ProtoReflect.Descriptor instead.
func (*CacheUploadInstruction) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{3}
}

func (x *CacheUploadInstruction) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CacheUploadInstruction) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CacheUploadInstruction) GetOffset() *Offset {
	if x != nil {
		return x.Offset
	}
	return nil
}

// CacheDownloadInstruction contains instructions for downloading cache data
type CacheDownloadInstruction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Offset        *Offset                `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheDownloadInstruction) Reset() {
	*x = CacheDownloadInstruction{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheDownloadInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheDownloadInstruction) ProtoMessage() {}

func (x *CacheDownloadInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheDownloadInstruction.ProtoReflect.Descriptor instead.
func (*CacheDownloadInstruction) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{4}
}

func (x *CacheDownloadInstruction) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CacheDownloadInstruction) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CacheDownloadInstruction) GetOffset() *Offset {
	if x != nil {
		return x.Offset
	}
	return nil
}

// CachePartETag represents a part's ETag in multipart operations
type CachePartETag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Part          int32                  `protobuf:"varint,1,opt,name=part,proto3" json:"part,omitempty"`
	Etag          string                 `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	PartSize      int64                  `protobuf:"varint,3,opt,name=part_size,json=partSize,proto3" json:"part_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CachePartETag) Reset() {
	*x = CachePartETag{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CachePartETag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachePartETag) ProtoMessage() {}

func (x *CachePartETag) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachePartETag.ProtoReflect.Descriptor instead.
func (*CachePartETag) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{5}
}

func (x *CachePartETag) GetPart() int32 {
	if x != nil {
		return x.Part
	}
	return 0
}

func (x *CachePartETag) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *CachePartETag) GetPartSize() int64 {
	if x != nil {
		return x.PartSize
	}
	return 0
}

// CreateCacheEntryRequest is the request for creating a cache entry
type CreateCacheEntryRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Provider           Provider               `protobuf:"varint,1,opt,name=provider,proto3,enum=zipstash.v1.Provider" json:"provider,omitempty"`
	CacheEntry         *CacheEntry            `protobuf:"bytes,2,opt,name=cache_entry,json=cacheEntry,proto3" json:"cache_entry,omitempty"`
	MultipartSupported bool                   `protobuf:"varint,3,opt,name=multipart_supported,json=multipartSupported,proto3" json:"multipart_supported,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateCacheEntryRequest) Reset() {
	*x = CreateCacheEntryRequest{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCacheEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCacheEntryRequest) ProtoMessage() {}

func (x *CreateCacheEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCacheEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateCacheEntryRequest) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCacheEntryRequest) GetProvider() Provider {
	if x != nil {
		return x.Provider
	}
	return Provider_PROVIDER_UNSPECIFIED
}

func (x *CreateCacheEntryRequest) GetCacheEntry() *CacheEntry {
	if x != nil {
		return x.CacheEntry
	}
	return nil
}

func (x *CreateCacheEntryRequest) GetMultipartSupported() bool {
	if x != nil {
		return x.MultipartSupported
	}
	return false
}

// CreateCacheEntryResponse is the response for creating a cache entry
type CreateCacheEntryResponse struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	Id                 string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UploadInstructions []*CacheUploadInstruction `protobuf:"bytes,2,rep,name=upload_instructions,json=uploadInstructions,proto3" json:"upload_instructions,omitempty"`
	Multipart          bool                      `protobuf:"varint,3,opt,name=multipart,proto3" json:"multipart,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateCacheEntryResponse) Reset() {
	*x = CreateCacheEntryResponse{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCacheEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCacheEntryResponse) ProtoMessage() {}

func (x *CreateCacheEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCacheEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateCacheEntryResponse) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCacheEntryResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateCacheEntryResponse) GetUploadInstructions() []*CacheUploadInstruction {
	if x != nil {
		return x.UploadInstructions
	}
	return nil
}

func (x *CreateCacheEntryResponse) GetMultipart() bool {
	if x != nil {
		return x.Multipart
	}
	return false
}

// UpdateCacheEntryRequest is the request for updating a cache entry
type UpdateCacheEntryRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Provider       Provider               `protobuf:"varint,1,opt,name=provider,proto3,enum=zipstash.v1.Provider" json:"provider,omitempty"`
	Id             string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Branch         string                 `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	Key            string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	MultipartEtags []*CachePartETag       `protobuf:"bytes,6,rep,name=multipart_etags,json=multipartEtags,proto3" json:"multipart_etags,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateCacheEntryRequest) Reset() {
	*x = UpdateCacheEntryRequest{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCacheEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCacheEntryRequest) ProtoMessage() {}

func (x *UpdateCacheEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCacheEntryRequest.ProtoReflect.Descriptor instead.
func (*UpdateCacheEntryRequest) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCacheEntryRequest) GetProvider() Provider {
	if x != nil {
		return x.Provider
	}
	return Provider_PROVIDER_UNSPECIFIED
}

func (x *UpdateCacheEntryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCacheEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCacheEntryRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *UpdateCacheEntryRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateCacheEntryRequest) GetMultipartEtags() []*CachePartETag {
	if x != nil {
		return x.MultipartEtags
	}
	return nil
}

// UpdateCacheEntryResponse is the response for updating a cache entry
type UpdateCacheEntryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCacheEntryResponse) Reset() {
	*x = UpdateCacheEntryResponse{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCacheEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCacheEntryResponse) ProtoMessage() {}

func (x *UpdateCacheEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCacheEntryResponse.ProtoReflect.Descriptor instead.
func (*UpdateCacheEntryResponse) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateCacheEntryResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// GetCacheEntryRequest is the request for retrieving a cache entry
type GetCacheEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Provider      Provider               `protobuf:"varint,1,opt,name=provider,proto3,enum=zipstash.v1.Provider" json:"provider,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Branch        string                 `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCacheEntryRequest) Reset() {
	*x = GetCacheEntryRequest{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCacheEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCacheEntryRequest) ProtoMessage() {}

func (x *GetCacheEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCacheEntryRequest.ProtoReflect.Descriptor instead.
func (*GetCacheEntryRequest) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{10}
}

func (x *GetCacheEntryRequest) GetProvider() Provider {
	if x != nil {
		return x.Provider
	}
	return Provider_PROVIDER_UNSPECIFIED
}

func (x *GetCacheEntryRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetCacheEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCacheEntryRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

// GetCacheEntryResponse is the response for retrieving a cache entry
type GetCacheEntryResponse struct {
	state                protoimpl.MessageState      `protogen:"open.v1"`
	CacheEntry           *CacheEntry                 `protobuf:"bytes,1,opt,name=cache_entry,json=cacheEntry,proto3" json:"cache_entry,omitempty"`
	DownloadInstructions []*CacheDownloadInstruction `protobuf:"bytes,2,rep,name=download_instructions,json=downloadInstructions,proto3" json:"download_instructions,omitempty"`
	Multipart            bool                        `protobuf:"varint,3,opt,name=multipart,proto3" json:"multipart,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetCacheEntryResponse) Reset() {
	*x = GetCacheEntryResponse{}
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCacheEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCacheEntryResponse) ProtoMessage() {}

func (x *GetCacheEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zipstash_v1_zipstash_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCacheEntryResponse.ProtoReflect.Descriptor instead.
func (*GetCacheEntryResponse) Descriptor() ([]byte, []int) {
	return file_zipstash_v1_zipstash_proto_rawDescGZIP(), []int{11}
}

func (x *GetCacheEntryResponse) GetCacheEntry() *CacheEntry {
	if x != nil {
		return x.CacheEntry
	}
	return nil
}

func (x *GetCacheEntryResponse) GetDownloadInstructions() []*CacheDownloadInstruction {
	if x != nil {
		return x.DownloadInstructions
	}
	return nil
}

func (x *GetCacheEntryResponse) GetMultipart() bool {
	if x != nil {
		return x.Multipart
	}
	return false
}

var File_zipstash_v1_zipstash_proto protoreflect.FileDescriptor

var file_zipstash_v1_zipstash_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x7a, 0x69,
	0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x7a, 0x69,
	0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x33, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x73, 0x75, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x73, 0x75, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x44, 0x0a, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22,
	0x6f, 0x0a, 0x16, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x71, 0x0a, 0x18, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0x54, 0x0a, 0x0d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x45, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x54, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x43, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x65,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x70,
	0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x45, 0x54, 0x61, 0x67, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x45, 0x74, 0x61, 0x67, 0x73, 0x22, 0x2a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0xcb, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x7a, 0x69,
	0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x5a, 0x0a, 0x15, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x2a, 0x6e, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x49, 0x54,
	0x48, 0x55, 0x42, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x4b, 0x49, 0x54, 0x45, 0x10, 0x03, 0x32, 0x93, 0x03, 0x0a, 0x0f, 0x5a,
	0x69, 0x70, 0x53, 0x74, 0x61, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x7a, 0x69, 0x70, 0x73,
	0x74, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x7d, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x7a,
	0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x1a, 0x14,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x7d, 0x12, 0x7a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x7a, 0x69, 0x70, 0x73, 0x74,
	0x61, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x7d, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x7d,
	0x42, 0xa7, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x5a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x77, 0x6f, 0x6c, 0x66, 0x65, 0x69, 0x64, 0x61, 0x75, 0x2f, 0x7a, 0x69, 0x70, 0x73,
	0x74, 0x61, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73,
	0x68, 0x2f, 0x76, 0x31, 0x3b, 0x7a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x5a, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x5a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x5a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x17, 0x5a, 0x69, 0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x5a, 0x69,
	0x70, 0x73, 0x74, 0x61, 0x73, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_zipstash_v1_zipstash_proto_rawDescOnce sync.Once
	file_zipstash_v1_zipstash_proto_rawDescData = file_zipstash_v1_zipstash_proto_rawDesc
)

func file_zipstash_v1_zipstash_proto_rawDescGZIP() []byte {
	file_zipstash_v1_zipstash_proto_rawDescOnce.Do(func() {
		file_zipstash_v1_zipstash_proto_rawDescData = protoimpl.X.CompressGZIP(file_zipstash_v1_zipstash_proto_rawDescData)
	})
	return file_zipstash_v1_zipstash_proto_rawDescData
}

var file_zipstash_v1_zipstash_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zipstash_v1_zipstash_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_zipstash_v1_zipstash_proto_goTypes = []any{
	(Provider)(0),                    // 0: zipstash.v1.Provider
	(*Error)(nil),                    // 1: zipstash.v1.Error
	(*CacheEntry)(nil),               // 2: zipstash.v1.CacheEntry
	(*Offset)(nil),                   // 3: zipstash.v1.Offset
	(*CacheUploadInstruction)(nil),   // 4: zipstash.v1.CacheUploadInstruction
	(*CacheDownloadInstruction)(nil), // 5: zipstash.v1.CacheDownloadInstruction
	(*CachePartETag)(nil),            // 6: zipstash.v1.CachePartETag
	(*CreateCacheEntryRequest)(nil),  // 7: zipstash.v1.CreateCacheEntryRequest
	(*CreateCacheEntryResponse)(nil), // 8: zipstash.v1.CreateCacheEntryResponse
	(*UpdateCacheEntryRequest)(nil),  // 9: zipstash.v1.UpdateCacheEntryRequest
	(*UpdateCacheEntryResponse)(nil), // 10: zipstash.v1.UpdateCacheEntryResponse
	(*GetCacheEntryRequest)(nil),     // 11: zipstash.v1.GetCacheEntryRequest
	(*GetCacheEntryResponse)(nil),    // 12: zipstash.v1.GetCacheEntryResponse
	(*status.Status)(nil),            // 13: google.rpc.Status
	(*timestamppb.Timestamp)(nil),    // 14: google.protobuf.Timestamp
}
var file_zipstash_v1_zipstash_proto_depIdxs = []int32{
	13, // 0: zipstash.v1.Error.status:type_name -> google.rpc.Status
	14, // 1: zipstash.v1.CacheEntry.entry_created:type_name -> google.protobuf.Timestamp
	3,  // 2: zipstash.v1.CacheUploadInstruction.offset:type_name -> zipstash.v1.Offset
	3,  // 3: zipstash.v1.CacheDownloadInstruction.offset:type_name -> zipstash.v1.Offset
	0,  // 4: zipstash.v1.CreateCacheEntryRequest.provider:type_name -> zipstash.v1.Provider
	2,  // 5: zipstash.v1.CreateCacheEntryRequest.cache_entry:type_name -> zipstash.v1.CacheEntry
	4,  // 6: zipstash.v1.CreateCacheEntryResponse.upload_instructions:type_name -> zipstash.v1.CacheUploadInstruction
	0,  // 7: zipstash.v1.UpdateCacheEntryRequest.provider:type_name -> zipstash.v1.Provider
	6,  // 8: zipstash.v1.UpdateCacheEntryRequest.multipart_etags:type_name -> zipstash.v1.CachePartETag
	0,  // 9: zipstash.v1.GetCacheEntryRequest.provider:type_name -> zipstash.v1.Provider
	2,  // 10: zipstash.v1.GetCacheEntryResponse.cache_entry:type_name -> zipstash.v1.CacheEntry
	5,  // 11: zipstash.v1.GetCacheEntryResponse.download_instructions:type_name -> zipstash.v1.CacheDownloadInstruction
	7,  // 12: zipstash.v1.ZipStashService.CreateCacheEntry:input_type -> zipstash.v1.CreateCacheEntryRequest
	9,  // 13: zipstash.v1.ZipStashService.UpdateCacheEntry:input_type -> zipstash.v1.UpdateCacheEntryRequest
	11, // 14: zipstash.v1.ZipStashService.GetCacheEntry:input_type -> zipstash.v1.GetCacheEntryRequest
	8,  // 15: zipstash.v1.ZipStashService.CreateCacheEntry:output_type -> zipstash.v1.CreateCacheEntryResponse
	10, // 16: zipstash.v1.ZipStashService.UpdateCacheEntry:output_type -> zipstash.v1.UpdateCacheEntryResponse
	12, // 17: zipstash.v1.ZipStashService.GetCacheEntry:output_type -> zipstash.v1.GetCacheEntryResponse
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_zipstash_v1_zipstash_proto_init() }
func file_zipstash_v1_zipstash_proto_init() {
	if File_zipstash_v1_zipstash_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zipstash_v1_zipstash_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zipstash_v1_zipstash_proto_goTypes,
		DependencyIndexes: file_zipstash_v1_zipstash_proto_depIdxs,
		EnumInfos:         file_zipstash_v1_zipstash_proto_enumTypes,
		MessageInfos:      file_zipstash_v1_zipstash_proto_msgTypes,
	}.Build()
	File_zipstash_v1_zipstash_proto = out.File
	file_zipstash_v1_zipstash_proto_rawDesc = nil
	file_zipstash_v1_zipstash_proto_goTypes = nil
	file_zipstash_v1_zipstash_proto_depIdxs = nil
}
