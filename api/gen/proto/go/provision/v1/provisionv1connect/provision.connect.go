// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: provision/v1/provision.proto

package provisionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/wolfeidau/zipstash/api/gen/proto/go/provision/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProvisionServiceName is the fully-qualified name of the ProvisionService service.
	ProvisionServiceName = "provision.v1.ProvisionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProvisionServiceCreateTenantProcedure is the fully-qualified name of the ProvisionService's
	// CreateTenant RPC.
	ProvisionServiceCreateTenantProcedure = "/provision.v1.ProvisionService/CreateTenant"
)

// ProvisionServiceClient is a client for the provision.v1.ProvisionService service.
type ProvisionServiceClient interface {
	// CreateTenant creates a new tenant with the specified configuration
	// including provider settings and optional CI/CD integrations
	CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error)
}

// NewProvisionServiceClient constructs a client for the provision.v1.ProvisionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProvisionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProvisionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	provisionServiceMethods := v1.File_provision_v1_provision_proto.Services().ByName("ProvisionService").Methods()
	return &provisionServiceClient{
		createTenant: connect.NewClient[v1.CreateTenantRequest, v1.CreateTenantResponse](
			httpClient,
			baseURL+ProvisionServiceCreateTenantProcedure,
			connect.WithSchema(provisionServiceMethods.ByName("CreateTenant")),
			connect.WithClientOptions(opts...),
		),
	}
}

// provisionServiceClient implements ProvisionServiceClient.
type provisionServiceClient struct {
	createTenant *connect.Client[v1.CreateTenantRequest, v1.CreateTenantResponse]
}

// CreateTenant calls provision.v1.ProvisionService.CreateTenant.
func (c *provisionServiceClient) CreateTenant(ctx context.Context, req *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error) {
	return c.createTenant.CallUnary(ctx, req)
}

// ProvisionServiceHandler is an implementation of the provision.v1.ProvisionService service.
type ProvisionServiceHandler interface {
	// CreateTenant creates a new tenant with the specified configuration
	// including provider settings and optional CI/CD integrations
	CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error)
}

// NewProvisionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProvisionServiceHandler(svc ProvisionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	provisionServiceMethods := v1.File_provision_v1_provision_proto.Services().ByName("ProvisionService").Methods()
	provisionServiceCreateTenantHandler := connect.NewUnaryHandler(
		ProvisionServiceCreateTenantProcedure,
		svc.CreateTenant,
		connect.WithSchema(provisionServiceMethods.ByName("CreateTenant")),
		connect.WithHandlerOptions(opts...),
	)
	return "/provision.v1.ProvisionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProvisionServiceCreateTenantProcedure:
			provisionServiceCreateTenantHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProvisionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProvisionServiceHandler struct{}

func (UnimplementedProvisionServiceHandler) CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("provision.v1.ProvisionService.CreateTenant is not implemented"))
}
