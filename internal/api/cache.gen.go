// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for Provider.
const (
	Buildkite     Provider = "buildkite"
	GithubActions Provider = "github_actions"
	Gitlab        Provider = "gitlab"
)

// CacheDownloadInstruction defines model for CacheDownloadInstruction.
type CacheDownloadInstruction struct {
	// Method HTTP method
	Method string  `json:"method"`
	Offset *Offset `json:"offset,omitempty"`

	// Url URL
	Url string `json:"url"`
}

// CacheEntry defines model for CacheEntry.
type CacheEntry struct {
	// Compression Compression algorithm
	Compression string `json:"compression"`

	// FileSize Size of the cache entry in bytes
	FileSize int64 `json:"file_size"`

	// Key Key of the cache entry
	Key string `json:"key"`

	// Paths Paths to upload the cache entry
	Paths []string `json:"paths"`

	// Sha256sum SHA256 checksum of the cache entry
	Sha256sum string `json:"sha256sum"`

	// Url URL to upload the cache entry
	Url *string `json:"url,omitempty"`
}

// CacheEntryCreateRequest defines model for CacheEntryCreateRequest.
type CacheEntryCreateRequest struct {
	CacheEntry CacheEntry `json:"cache_entry"`

	// MultipartSupported multipart supported
	MultipartSupported bool `json:"multipart_supported"`
}

// CacheEntryCreateResponse defines model for CacheEntryCreateResponse.
type CacheEntryCreateResponse struct {
	// Id Upload ID
	Id                 string                   `json:"id"`
	Multipart          bool                     `json:"multipart"`
	UploadInstructions []CacheUploadInstruction `json:"upload_instructions"`
}

// CacheEntryGetResponse defines model for CacheEntryGetResponse.
type CacheEntryGetResponse struct {
	CacheEntry           CacheEntry                 `json:"cache_entry"`
	DownloadInstructions []CacheDownloadInstruction `json:"download_instructions"`
	Multipart            bool                       `json:"multipart"`
}

// CacheEntryUpdateRequest defines model for CacheEntryUpdateRequest.
type CacheEntryUpdateRequest struct {
	// Id Upload ID
	Id string `json:"id"`

	// Key Key of the cache entry
	Key string `json:"key"`

	// MultipartEtags ETags
	MultipartEtags []CachePartETag `json:"multipart_etags"`
}

// CacheEntryUpdateResponse defines model for CacheEntryUpdateResponse.
type CacheEntryUpdateResponse struct {
	// Id Response ID
	Id string `json:"id"`
}

// CachePartETag Part index and ETag
type CachePartETag struct {
	// Etag ETag
	Etag string `json:"etag"`

	// Part Part index
	Part     int32 `json:"part"`
	PartSize int64 `json:"part_size"`
}

// CacheUploadInstruction defines model for CacheUploadInstruction.
type CacheUploadInstruction struct {
	// Method HTTP method
	Method string  `json:"method"`
	Offset *Offset `json:"offset,omitempty"`

	// Url URL
	Url string `json:"url"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Offset defines model for Offset.
type Offset struct {
	// End End position of the part
	End int64 `json:"end"`

	// Part Part number
	Part int32 `json:"part"`

	// Start Start position of the part
	Start int64 `json:"start"`
}

// Provider defines model for Provider.
type Provider string

// CreateCacheEntryJSONRequestBody defines body for CreateCacheEntry for application/json ContentType.
type CreateCacheEntryJSONRequestBody = CacheEntryCreateRequest

// UpdateCacheEntryJSONRequestBody defines body for UpdateCacheEntry for application/json ContentType.
type UpdateCacheEntryJSONRequestBody = CacheEntryUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a cache entry
	// (POST /v1/cache/{provider})
	CreateCacheEntry(ctx echo.Context, provider Provider) error
	// Updates a cache entry
	// (PUT /v1/cache/{provider})
	UpdateCacheEntry(ctx echo.Context, provider Provider) error
	// Get a cache entry by key
	// (GET /v1/cache/{provider}/{key})
	GetCacheEntryByKey(ctx echo.Context, provider Provider, key string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateCacheEntry converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCacheEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "provider" -------------
	var provider Provider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", ctx.Param("provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCacheEntry(ctx, provider)
	return err
}

// UpdateCacheEntry converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCacheEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "provider" -------------
	var provider Provider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", ctx.Param("provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCacheEntry(ctx, provider)
	return err
}

// GetCacheEntryByKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetCacheEntryByKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "provider" -------------
	var provider Provider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", ctx.Param("provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", ctx.Param("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCacheEntryByKey(ctx, provider, key)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/cache/:provider", wrapper.CreateCacheEntry)
	router.PUT(baseURL+"/v1/cache/:provider", wrapper.UpdateCacheEntry)
	router.GET(baseURL+"/v1/cache/:provider/:key", wrapper.GetCacheEntryByKey)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXW2/bNhj9KwS3RzaWncs2v61pkAYt1qBNnoIgoKXPFheJZEkqjRLovw8kJVkX2o63",
	"teiGvtkixXO+w/Nd9IxjkUvBgRuN589Yxynk1P08pXEKb8QXngmaXHBtVBEbJrhdk0pIUIaB25mDSUVi",
	"fyWgY8Wk34bfXl1donqRYFNKwHOsjWJ8hSuCxXKpwdjXflawxHP802RNZlIzmXzwuyqCC5WNMa4/vh+f",
	"XRGs4HPBFCR4fuNeJA3L24r40M64UeU4GEtBgdZ1pH200/UiotlKKGbSHBMMjzSXmaWwemLSgjH+HvjK",
	"pHh+GAh9yTK40+wJxhCf2BMgsUQmBRRbnggsUcQ4WpQGdBdtGs0IXgqVU4PnmHFzcuSxWV7keD5tkRk3",
	"sAJloe+hHIO+gzKA2QssL1+5pVfNUifEaSBESU2qx0iX9jEyAhXS+ioAyQzk7sXRkTnjF35xDUiVoqVd",
	"1CmdHZ9oG/dI0re/z45PUJxCfK+LfFek09nh0fHJL7/+FtFFnMBy3/99bU6OAuJssvJWYbYKPrC8veWu",
	"zUjP1121mpvq58WpAmrgI3wuQJtAktiNd9Bk0Lb87eSavcIiM0xSZe50IaVQBgJ1o92E1pvagBdCZED5",
	"KOLQyaRHNByhloJrGIfIAsSu/dVcvAmVs5ZAx7stWYL9td6xdSH1MI3bd2rowbuFuBpmwUASZhUI4XbJ",
	"9lU5B7NZkr9960ndRf5B9KFGVI2rwNZLGMjTDWcTx81KXctkW4bsbZ9vVZfXeQKGrgIV+uzKPiZ73M0l",
	"Vca+taNGh9zp69SQU1jpfTK12R0Ue0ykBWxDCTQuZRDjCTwiyhPkNpEBE8s+LOhL+qU37SZU3O/0h7Od",
	"nd4Xw3rIGE0Jw/0DURwd4iPqHtUqNS5H//258EwpoUIjYRIY1Nxm5NYCVzO+jhy0pquNBzXLu0jXgM12",
	"S/tDK9jAjjwg/hlPkBSa2b9Nbakve89JcotjeZEvQAUtSx/rI6MoinZBaBPE+GQf7x9FtNP1Ho845eoA",
	"rcCXSjywBJQX1R51g1fMpMXijraNYsVMRheY4EXBsuSeGcC348usCGZ8KVx7YsZV8CcmkTZUp0iDenCy",
	"PYDyHyB4ehAdRC4rJHAqGZ7jQ/eoM2FPHqYT1wMmz7JmWjk3CN+ZrCeopXmR2G8YN/h0GrQLlOZgQGk8",
	"vxmK/QfN2w+S5vgD2x/souWACeY0t5E0y7irqlEFkPrDcldSt0JX1a0/A7R5LZLSpyE3wF1EVMqMxS6m",
	"yZ/a156XIWwacavKe8G3DSfrLJp+Rdi6mznYvuC+0zdU0Bdm0uajoDebuBeXtMjMv0bTF8AAp4LDo4TY",
	"QIKg3kOwLvKc2lmw9pRGtDem2BpRBBzoG/oPB/ZHyKADo68I+79yoA9q5MCKBKvj5PkeSlcjVxAw6DmY",
	"tVyvy3fwvVqUPIcQ/FC9+fBhT7r9Jrbrflq+0HODYvK9eO0cTN9naFEiK7pN4b8CAAD//1YO9ldSFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
